import java.util.Stack;

class Tree {
    Tree left, right;
}

class Leaf extends Tree {
}

class Branch extends Tree {
    public Branch(Tree left, Tree right) {
        this.left = left;
        this.right = right;
    }
}

public class BinaryTreeEncoderDecoder {
    public static String treeToParens(Tree tree) {
        if (tree instanceof Leaf) {
            return "()";
        }

        Branch branch = (Branch) tree;
        return "(" + treeToParens(branch.left) + treeToParens(branch.right) + ")";
    }

    public static Tree parensToTree(String parens) {
        Stack<Tree> stack = new Stack<>();

        for (int i = 0; i < parens.length(); i++) {
            char ch = parens.charAt(i);

            if (ch == '(') {
                stack.push(null); // Push null for open parentheses
            } else {
                Tree right = stack.pop();
                Tree left = stack.pop();
                stack.pop(); // Pop null for open parentheses

                Branch branch = new Branch(left, right);
                stack.push(branch);
            }
        }

        return stack.peek();
    }

    public static boolean isIdentical(Tree root1, Tree root2) {
        if (root1 == null && root2 == null) {
            return true;
        }

        if (root1 != null && root2 != null) {
            return isIdentical(root1.left, root2.left) && isIdentical(root1.right, root2.right);
        }

        return false;
    }

    public static void main(String[] args) {
        // Sample 1
        Tree tree = new Branch(new Leaf(), new Branch(new Leaf(), new Leaf()));
        String parens = treeToParens(tree);
        System.out.println(parens);  // Output: "(()(()()))"
        Tree decodedTree = parensToTree(parens);
        System.out.println(decodedTree.toString());  // Output: "Branch{left=Leaf@<hash>, right=Branch@<hash>}"
        System.out.println(isIdentical(tree, decodedTree));  // Output: true

        // Sample 2
        Tree tree2 = new Branch(new Leaf(), new Leaf());
        String parens2 = treeToParens(tree2);
        System.out.println(parens2);  // Output: "(()())"
        Tree decodedTree2 = parensToTree(parens2);
        System.out.println(decodedTree2.toString());  // Output: "Branch{left=Leaf@<hash>, right=Leaf@<hash>}"
        System.out.println(isIdentical(tree2, decodedTree2));  // Output: true
    }
}
